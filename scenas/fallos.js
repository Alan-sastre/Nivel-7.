class scenaFallos extends Phaser.Scene {
  constructor() {
    super({ key: "scenaFallos" });
    this.answered = false;
    this.correctOption = 0; // (A) es la correcta
    this.scanProgress = 0;
    this.isScanning = false;
    this.anomaliesFound = 0;
    this.totalAnomalies = 3;
    this.gameCompleted = false;
    this.showingDamageMessage = false; // Control para evitar superposici√≥n de mensajes
    this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    this.options = [
      "Las ondas de radio se debilitan con la distancia.",
      "La luz del sol bloquea las se√±ales.",
      "No existen interferencias en el vac√≠o.",
      "Los sat√©lites no necesitan transmitir se√±ales constantemente."
    ];

    this.feedbackTexts = [
      "¬°Correcto! En el espacio, las se√±ales de radio pierden potencia a medida que viajan largas distancias, por lo que deben amplificarse.",
      "Intenta de nuevo. Piensa en c√≥mo las ondas de radio viajan en el espacio.",
      "Intenta de nuevo. Piensa en c√≥mo las ondas de radio viajan en el espacio.",
      "Intenta de nuevo. Piensa en c√≥mo las ondas de radio viajan en el espacio."
    ];
  }

  preload() {
    // Usar imagen de fondo existente
    this.load.image("satellite_bg", "assets/scenaPrincipal/1.jpg");
    this.load.image("particle", "assets/logorobcodesolutions.ico");
  }

  create() {
    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;

    // Fondo espacial con efecto de estrellas
    this.createSpaceBackground();

    // T√≠tulo principal con animaci√≥n
    this.createTitle();

    // Crear el sat√©lite interactivo
    this.createSatellite();

    // Crear el esc√°ner digital
    this.createScanner();

    // Crear panel de informaci√≥n
    this.createInfoPanel();

    // Crear controles m√≥viles si es necesario
    if (this.isMobile) {
      this.createMobileControls();
    }

    // Configurar eventos de entrada
    this.setupInputEvents();

    // Iniciar animaciones de fondo
    this.startBackgroundAnimations();
  }

  createSpaceBackground() {
    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;

    // Fondo degradado espacial
    const bg = this.add.graphics();
    bg.fillGradientStyle(0x000011, 0x000011, 0x001122, 0x001122, 1);
    bg.fillRect(0, 0, width, height);

    // Crear estrellas animadas
    this.stars = [];
    for (let i = 0; i < 50; i++) {
      const star = this.add.circle(
        Phaser.Math.Between(0, width),
        Phaser.Math.Between(0, height),
        Phaser.Math.Between(1, 3),
        0xffffff,
        Phaser.Math.FloatBetween(0.3, 1)
      );
      this.stars.push(star);

      // Animaci√≥n de parpadeo
      this.tweens.add({
        targets: star,
        alpha: { from: star.alpha, to: 0.1 },
        duration: Phaser.Math.Between(1000, 3000),
        yoyo: true,
        repeat: -1,
        delay: Phaser.Math.Between(0, 2000)
      });
    }
  }

  createTitle() {
    const centerX = this.cameras.main.centerX;

    // T√≠tulo principal
    this.titleText = this.add.text(centerX, 60, "üõ∞Ô∏è DIAGN√ìSTICO DEL SAT√âLITE", {
      fontSize: this.isMobile ? "24px" : "32px",
      fill: "#00ffff",
      fontFamily: "Arial Black",
      align: "center",
      stroke: "#003366",
      strokeThickness: 3,
      shadow: {
        offsetX: 0,
        offsetY: 0,
        color: '#00ffff',
        blur: 15,
        fill: true
      }
    }).setOrigin(0.5);

    // Subt√≠tulo
    this.subtitleText = this.add.text(centerX, 100, "Usa el esc√°ner para detectar anomal√≠as", {
      fontSize: this.isMobile ? "14px" : "16px",
      fill: "#88ccff",
      fontFamily: "Arial",
      align: "center"
    }).setOrigin(0.5);

    // T√≠tulo sin animaci√≥n para mejor legibilidad
  }

  createSatellite() {
    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;

    // Contenedor del sat√©lite
    this.satelliteContainer = this.add.container(centerX, centerY - 30);

    // Cuerpo principal del sat√©lite (m√°s detallado y realista)
    this.satelliteBody = this.add.rectangle(0, 0, 110, 65, 0x555555)
      .setStrokeStyle(3, 0xaaaaaa);

    // Detalles del cuerpo principal
    this.bodyDetail1 = this.add.rectangle(0, -8, 80, 12, 0x333333)
      .setStrokeStyle(1, 0x666666);
    this.bodyDetail2 = this.add.rectangle(0, 8, 70, 10, 0x444444)
      .setStrokeStyle(1, 0x777777);

    // M√≥dulo de comunicaci√≥n principal
    this.commModule = this.add.rectangle(0, -20, 50, 25, 0x222222)
      .setStrokeStyle(2, 0x888888);

    // Luces indicadoras
    this.light1 = this.add.circle(-15, -20, 4, 0x00ff00);
    this.light2 = this.add.circle(15, -20, 4, 0xff0000);

    // Paneles solares m√°s realistas y grandes
    this.solarPanel1 = this.add.rectangle(-85, 0, 35, 90, 0x001144)
      .setStrokeStyle(3, 0x0077dd);
    this.solarPanel2 = this.add.rectangle(85, 0, 35, 90, 0x001144)
      .setStrokeStyle(3, 0x0077dd);

    // L√≠neas en los paneles solares para simular celdas fotovoltaicas
    const panel1Lines = this.add.graphics();
    panel1Lines.lineStyle(2, 0x0099ff, 0.8);
    for (let i = -4; i <= 4; i++) {
      panel1Lines.moveTo(-85, i * 10);
      panel1Lines.lineTo(-67, i * 10);
    }
    // L√≠neas verticales
    for (let j = -100; j <= -70; j += 10) {
      panel1Lines.moveTo(j, -40);
      panel1Lines.lineTo(j, 40);
    }
    panel1Lines.stroke();

    const panel2Lines = this.add.graphics();
    panel2Lines.lineStyle(2, 0x0099ff, 0.8);
    for (let i = -4; i <= 4; i++) {
      panel2Lines.moveTo(67, i * 10);
      panel2Lines.lineTo(85, i * 10);
    }
    // L√≠neas verticales
    for (let j = 70; j <= 100; j += 10) {
      panel2Lines.moveTo(j, -40);
      panel2Lines.lineTo(j, 40);
    }
    panel2Lines.stroke();

    // Antena parab√≥lica m√°s detallada
    this.antenna = this.add.circle(0, -50, 18, 0xdddddd, 0)
      .setStrokeStyle(4, 0xffffff);

    // Receptor central de la antena
    this.antennaReceiver = this.add.circle(0, -50, 6, 0xffaa00);

    // Soporte de la antena m√°s robusto
    this.antennaSupport = this.add.rectangle(0, -38, 8, 20, 0xbbbbbb)
      .setStrokeStyle(2, 0xdddddd);

    // Puntos de anomal√≠a (OCULTOS INICIALMENTE)
    this.anomalyPoints = [
      this.add.circle(-35, -15, 18, 0xff0000, 0).setInteractive().setStrokeStyle(4, 0xff4444).setVisible(false),
      this.add.circle(35, 20, 18, 0xff0000, 0).setInteractive().setStrokeStyle(4, 0xff4444).setVisible(false),
      this.add.circle(0, 35, 18, 0xff0000, 0).setInteractive().setStrokeStyle(4, 0xff4444).setVisible(false)
    ];

    // Agregar elementos al contenedor
    this.satelliteContainer.add([
      this.solarPanel1, this.solarPanel2, panel1Lines, panel2Lines,
      this.satelliteBody, this.bodyDetail1, this.bodyDetail2,
      this.commModule, this.light1, this.light2,
      this.antennaSupport, this.antenna, this.antennaReceiver,
      ...this.anomalyPoints
    ]);

    // Animaci√≥n de rotaci√≥n m√°s lenta y suave
    this.tweens.add({
      targets: this.satelliteContainer,
      rotation: Math.PI * 2,
      duration: 15000,
      repeat: -1,
      ease: 'Linear'
    });

    // Animaci√≥n de las luces indicadoras
    this.tweens.add({
      targets: this.light1,
      alpha: { from: 1, to: 0.3 },
      duration: 1500,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut'
    });

    this.tweens.add({
      targets: this.light2,
      alpha: { from: 0.3, to: 1 },
      duration: 2000,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut'
    });
  }

  createScanner() {
    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;

    // C√≠rculo del esc√°ner (m√°s peque√±o)
    this.scannerCircle = this.add.circle(centerX, centerY + 150, 35, 0x00ffff, 0)
      .setStrokeStyle(3, 0x00ffff, 0.8)
      .setInteractive({ useHandCursor: true });

    // Texto del esc√°ner
    this.scannerText = this.add.text(centerX, centerY + 150, "üîç ESC√ÅNER", {
      fontSize: this.isMobile ? "16px" : "18px",
      fill: "#00ffff",
      fontFamily: "Arial Bold",
      align: "center"
    }).setOrigin(0.5);

    // Barra de progreso del escaneo (m√°s abajo)
    this.progressBar = this.add.rectangle(centerX, centerY + 210, 200, 10, 0x333333)
      .setStrokeStyle(2, 0x666666);
    this.progressFill = this.add.rectangle(centerX - 100, centerY + 210, 0, 6, 0x00ff00)
      .setOrigin(0, 0.5);

    // Eventos del esc√°ner
    this.scannerCircle.on('pointerdown', () => this.startScan());
    this.scannerText.setInteractive({ useHandCursor: true })
      .on('pointerdown', () => this.startScan());
  }

  createInfoPanel() {
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;

    // Panel de informaci√≥n (reposicionado para que no se salga)
    const panelWidth = this.isMobile ? 250 : 280;
    const panelX = this.isMobile ? width - 10 : width - 20;

    this.infoPanel = this.add.rectangle(panelX, 140, panelWidth, 180, 0x000033, 0.9)
      .setStrokeStyle(2, 0x0066cc)
      .setOrigin(1, 0);

    // Texto de informaci√≥n
    this.infoText = this.add.text(panelX - panelWidth + 10, 150,
      "ESTADO DEL SISTEMA:\n" +
      "üî¥ Comunicaci√≥n: INACTIVA\n" +
      "‚ö° Energ√≠a: 78%\n" +
      "üì° Se√±al: D√âBIL\n" +
      "\nAnomal√≠as: 0/3", {
      fontSize: this.isMobile ? "11px" : "13px",
      fill: "#ffffff",
      fontFamily: "Courier New",
      lineSpacing: 4
    }).setOrigin(0, 0);
  }

  createMobileControls() {
    // Instrucciones para m√≥viles
    this.add.text(this.cameras.main.centerX, this.cameras.main.height - 40,
      "Toca el esc√°ner para buscar anomal√≠as", {
      fontSize: "14px",
      fill: "#ffff00",
      fontFamily: "Arial",
      align: "center"
    }).setOrigin(0.5);
  }

  setupInputEvents() {
    // Eventos para detectar anomal√≠as
    this.anomalyPoints.forEach((point, index) => {
      point.on('pointerdown', () => {
        // Permitir clic solo si no hay mensaje mostr√°ndose y la anomal√≠a es v√°lida
        if (!this.isScanning && !this.showingDamageMessage && point.visible && point.alpha > 0 && !point.getData('found')) {
          this.detectAnomaly(point, index);
        }
      });
    });
  }

  startBackgroundAnimations() {
    // Animaci√≥n de los paneles solares
    this.tweens.add({
      targets: [this.solarPanel1, this.solarPanel2],
      alpha: { from: 1, to: 0.7 },
      duration: 3000,
      yoyo: true,
      repeat: -1
    });

    // Parpadeo de la antena
    this.tweens.add({
      targets: this.antenna,
      tint: { from: 0xcccccc, to: 0xff0000 },
      duration: 1500,
      yoyo: true,
      repeat: -1
    });
  }

  startScan() {
    if (this.isScanning || this.gameCompleted) return;

    this.isScanning = true;
    this.scanProgress = 0;

    // Crear rayo l√°ser de escaneo
    this.createScanLaser();

    // Esc√°ner sin animaci√≥n para mejor estabilidad

    // Progreso del escaneo
    this.tweens.add({
      targets: this.progressFill,
      width: 200,
      duration: 3000,
      ease: 'Power2',
      onUpdate: () => {
        this.scanProgress = this.progressFill.width / 200;
      },
      onComplete: () => {
        this.completeScan();
      }
    });

    // Sonido de escaneo (simulado con vibraci√≥n en m√≥viles)
    if (this.isMobile && navigator.vibrate) {
      navigator.vibrate([100, 50, 100]);
    }
  }

  createScanLaser() {
    // Funci√≥n vac√≠a - animaci√≥n del sat√©lite removida
  }

  completeScan() {
    this.isScanning = false;

    // Efectos de animaci√≥n removidos

    // Mostrar anomal√≠as con mejor visibilidad
    this.anomalyPoints.forEach((point, index) => {
      // Hacer visible la anomal√≠a
      point.setVisible(true);
      point.setAlpha(0.9);
      point.setFillStyle(0xff0000); // Rojo brillante

      // Animaci√≥n de aparici√≥n dram√°tica
      this.tweens.add({
        targets: point,
        scale: { from: 0.2, to: 1.5 },
        alpha: { from: 0, to: 0.9 },
        duration: 500,
        delay: index * 300,
        ease: 'Back.easeOut',
        onComplete: () => {
          // Animaci√≥n de pulso continuo m√°s visible
          this.tweens.add({
            targets: point,
            scale: { from: 1, to: 1.4 },
            alpha: { from: 0.9, to: 0.6 },
            duration: 800,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
          });
        }
      });
    });

    // Mostrar instrucciones para hacer clic en las anomal√≠as
     this.instructionText = this.add.text(
       this.cameras.main.centerX,
       this.cameras.main.centerY + 80,
       "üî¥ ¬°Anomal√≠as detectadas!\nüëÜ Haz clic en los puntos rojos", {
       fontSize: this.isMobile ? "13px" : "15px",
       fill: "#ffff00",
       fontFamily: "Arial Bold",
       align: "center",
       stroke: "#000000",
       strokeThickness: 2,
       wordWrap: { width: this.isMobile ? 300 : 400 },
       shadow: {
         offsetX: 0,
         offsetY: 0,
         color: '#ffff00',
         blur: 8,
         fill: true
       }
     }).setOrigin(0.5).setAlpha(0);

    // Animar aparici√≥n de instrucciones
    this.tweens.add({
      targets: this.instructionText,
      alpha: 1,
      scale: { from: 0.8, to: 1 },
      duration: 800,
      delay: 1000,
      ease: 'Back.easeOut'
    });

    // Resetear barra de progreso
    this.tweens.add({
      targets: this.progressFill,
      width: 0,
      duration: 500,
      delay: 1000
    });
  }

  detectAnomaly(point, index) {
    // Marcar anomal√≠a como encontrada
    point.setData('found', true);
    point.setFillStyle(0x00ff00, 0.8);
    point.removeInteractive();
    this.anomaliesFound++;

    // Detener animaciones de pulso
    this.tweens.killTweensOf(point);

    // Mensajes espec√≠ficos de da√±o seg√∫n la anomal√≠a
    const damageMessages = [
      "‚ö†Ô∏è FALLO DETECTADO:\nSobrecalentamiento en panel solar izquierdo\nTemperatura: 85¬∞C (Cr√≠tico)",
      "‚ö†Ô∏è FALLO DETECTADO:\nCortocircuito en m√≥dulo de comunicaci√≥n\nSe√±al degradada al 23%",
      "‚ö†Ô∏è FALLO DETECTADO:\nDesalineaci√≥n de antena parab√≥lica\nP√©rdida de orientaci√≥n: 15.7¬∞"
    ];

    // Mostrar mensaje de da√±o espec√≠fico
    this.showDamageMessage(damageMessages[index]);

    // Efecto visual de √©xito
    this.tweens.add({
      targets: point,
      scale: { from: 1, to: 1.5 },
      duration: 300,
      yoyo: true,
      repeat: 1,
      ease: 'Back.easeOut',
      onComplete: () => {
        // Efecto de desvanecimiento
        this.tweens.add({
          targets: point,
          scale: { from: 1, to: 2 },
          alpha: { from: 0.8, to: 0 },
          duration: 800,
          ease: 'Power2'
        });
      }
    });

    // Actualizar informaci√≥n
    this.updateInfoPanel();

    // Vibraci√≥n en m√≥viles
    if (this.isMobile && navigator.vibrate) {
      navigator.vibrate(200);
    }

    // Verificar si se complet√≥ el diagn√≥stico
    if (this.anomaliesFound >= this.totalAnomalies) {
      this.completePhase1();
    }
  }

  showDamageMessage(message) {
    // Bloquear interacciones mientras se muestra el mensaje
    this.showingDamageMessage = true;

    // Crear panel de mensaje de da√±o
    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;

    const messagePanel = this.add.rectangle(centerX, centerY - 100,
      this.isMobile ? 300 : 400,
      this.isMobile ? 80 : 100,
      0x330000, 0.95)
      .setStrokeStyle(3, 0xff0000);

    const messageText = this.add.text(centerX, centerY - 100, message, {
      fontSize: this.isMobile ? "11px" : "13px",
      fill: "#ff6666",
      fontFamily: "Courier New",
      align: "center",
      lineSpacing: 4,
      wordWrap: { width: this.isMobile ? 280 : 380 }
    }).setOrigin(0.5);

    // Animaci√≥n de aparici√≥n
    messagePanel.setScale(0);
    messageText.setScale(0);

    this.tweens.add({
      targets: [messagePanel, messageText],
      scale: 1,
      duration: 400,
      ease: 'Back.easeOut'
    });

    // Desaparecer despu√©s de 5 segundos
    this.time.delayedCall(5000, () => {
      this.tweens.add({
        targets: [messagePanel, messageText],
        alpha: 0,
        scale: 0.8,
        duration: 500,
        ease: 'Power2',
        onComplete: () => {
          messagePanel.destroy();
          messageText.destroy();
          // Desbloquear interacciones cuando el mensaje desaparece
          this.showingDamageMessage = false;
        }
      });
    });
  }

  updateInfoPanel() {
    const status = this.anomaliesFound >= this.totalAnomalies ? "REPARANDO" : "INACTIVA";
    const signal = this.anomaliesFound >= 2 ? "MEJORANDO" : "D√âBIL";

    this.infoText.setText(
      "ESTADO DEL SISTEMA:\n" +
      `üî¥ Comunicaci√≥n: ${status}\n` +
      "‚ö° Energ√≠a: 78%\n" +
      `üì° Se√±al: ${signal}\n` +
      `\nAnomal√≠as: ${this.anomaliesFound}/${this.totalAnomalies}`
    );
  }

  completePhase1() {
    this.gameCompleted = true;

    // Efecto de reparaci√≥n completada
    this.tweens.add({
      targets: this.satelliteContainer,
      tint: { from: 0xffffff, to: 0x00ff00 },
      duration: 1000,
      yoyo: true,
      repeat: 2
    });

    // Mostrar mensaje de √©xito
    const successText = this.add.text(this.cameras.main.centerX, this.cameras.main.centerY + 100,
      "¬°DIAGN√ìSTICO COMPLETADO!\nüéâ Sat√©lite reparado", {
      fontSize: this.isMobile ? "18px" : "22px",
      fill: "#00ff00",
      fontFamily: "Arial Bold",
      align: "center",
      stroke: "#003300",
      strokeThickness: 2
    }).setOrigin(0.5).setAlpha(0);

    this.tweens.add({
      targets: successText,
      alpha: 1,
      scale: { from: 0.5, to: 1 },
      duration: 1000,
      ease: 'Back.easeOut'
    });

    // Continuar a la pregunta despu√©s de 3 segundos
    this.time.delayedCall(3000, () => {
      this.showQuestion();
    });
  }

  showQuestion() {
    // Limpiar elementos del diagn√≥stico
    this.satelliteContainer.setVisible(false);
    this.scannerCircle.setVisible(false);
    this.scannerText.setVisible(false);
    this.progressBar.setVisible(false);
    this.progressFill.setVisible(false);
    this.infoPanel.setVisible(false);
    this.infoText.setVisible(false);
    if (this.instructionText) {
      this.instructionText.setVisible(false);
    }

    // Actualizar t√≠tulo
    this.titleText.setText("üì° PREGUNTA DE COMUNICACI√ìN");
    this.subtitleText.setText("Responde bas√°ndote en tu diagn√≥stico");

    const centerX = this.cameras.main.centerX;
    const centerY = this.cameras.main.centerY;

    // Panel de pregunta
    const questionPanel = this.add.rectangle(centerX, centerY,
      this.isMobile ? 350 : 600,
      this.isMobile ? 400 : 450,
      0x001133, 0.9)
      .setStrokeStyle(3, 0x0066cc);

    // Pregunta
    this.add.text(centerX, centerY - 120,
      "¬øCu√°l es el principal desaf√≠o en la\ntransmisi√≥n de se√±ales en el espacio?", {
      fontSize: this.isMobile ? "16px" : "20px",
      fill: "#ffffff",
      fontFamily: "Arial Bold",
      align: "center",
      lineSpacing: 8
    }).setOrigin(0.5);

    // Opciones de respuesta
    this.optionButtons = [];
    for (let i = 0; i < this.options.length; i++) {
      const y = centerY - 40 + i * (this.isMobile ? 45 : 50);

      const button = this.add.rectangle(centerX, y,
        this.isMobile ? 320 : 550,
        this.isMobile ? 35 : 40,
        0x003366, 0.8)
        .setStrokeStyle(2, 0x0066cc)
        .setInteractive({ useHandCursor: true });

      const text = this.add.text(centerX, y,
        `${String.fromCharCode(65 + i)}) ${this.options[i]}`, {
        fontSize: this.isMobile ? "12px" : "14px",
        fill: "#ffffff",
        fontFamily: "Arial",
        align: "center",
        wordWrap: { width: this.isMobile ? 300 : 520 }
      }).setOrigin(0.5);

      // Efectos hover
      button.on('pointerover', () => {
        if (!this.answered) {
          button.setFillStyle(0x0066cc, 1);
          this.tweens.add({
            targets: [button, text],
            scale: 1.05,
            duration: 200
          });
        }
      });

      button.on('pointerout', () => {
        if (!this.answered) {
          button.setFillStyle(0x003366, 0.8);
          this.tweens.add({
            targets: [button, text],
            scale: 1,
            duration: 200
          });
        }
      });

      button.on('pointerdown', () => this.handleAnswer(i, button, text));

      this.optionButtons.push({ button, text });
    }

    // Feedback text
    this.feedback = this.add.text(centerX, centerY + 150, "", {
      fontSize: this.isMobile ? "14px" : "16px",
      fill: "#ffffff",
      fontFamily: "Arial",
      align: "center",
      wordWrap: { width: this.isMobile ? 320 : 550 },
      lineSpacing: 6
    }).setOrigin(0.5);
  }

  handleAnswer(selectedIndex, button, text) {
    if (this.answered) return;

    this.answered = true;
    const isCorrect = selectedIndex === this.correctOption;

    // Deshabilitar todos los botones
    this.optionButtons.forEach(({ button: btn }) => {
      btn.removeInteractive();
    });

    if (isCorrect) {
      // Respuesta correcta
      button.setFillStyle(0x006600, 1);
      button.setStrokeStyle(3, 0x00ff00);

      this.feedback.setText(this.feedbackTexts[selectedIndex]);
      this.feedback.setStyle({ fill: "#00ff00" });

      // Efecto de √©xito
      this.tweens.add({
        targets: [button, text],
        scale: 1.1,
        duration: 300,
        yoyo: true,
        repeat: 1
      });

      // Vibraci√≥n de √©xito
      if (this.isMobile && navigator.vibrate) {
        navigator.vibrate([100, 100, 100]);
      }

      // Transici√≥n a la siguiente escena
      this.time.delayedCall(4000, () => {
        this.cameras.main.fadeOut(1000, 0, 0, 0);
        this.cameras.main.once(Phaser.Cameras.Scene2D.Events.FADE_OUT_COMPLETE, () => {
          this.scene.start("DroneRepairScene");
        });
      });

    } else {
      // Respuesta incorrecta
      button.setFillStyle(0x660000, 1);
      button.setStrokeStyle(3, 0xff0000);

      this.feedback.setText(this.feedbackTexts[selectedIndex]);
      this.feedback.setStyle({ fill: "#ff6666" });

      // Efecto de error
      this.tweens.add({
        targets: [button, text],
        x: button.x + 10,
        duration: 100,
        yoyo: true,
        repeat: 3
      });

      // Vibraci√≥n de error
      if (this.isMobile && navigator.vibrate) {
        navigator.vibrate(300);
      }

      // Permitir otro intento despu√©s de 3 segundos
      this.time.delayedCall(3000, () => {
        this.answered = false;
        this.optionButtons.forEach(({ button: btn }) => {
          if (btn !== button) {
            btn.setInteractive({ useHandCursor: true });
          }
        });
        this.feedback.setText("");
      });
    }
  }
}
